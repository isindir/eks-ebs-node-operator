version: 2

jobs:
  ##################################################
  # release
  ##################################################
  release:
    working_directory: /home/circleci/gogo/src/github.com/isindir/eks-ebs-node-operator
    machine:
      image: ubuntu-1604:202004-01
    environment:
      GOLANG_VERSION: 1.14.4
      # https://github.com/operator-framework/operator-sdk/releases
      OPERATOR_SDK_VERSION: v0.17.1
      # https://github.com/github/hub/releases
      HUB_VERSION: 2.14.2
      # https://github.com/git-chglog/git-chglog/releases
      GIT_CHGLOG_VERSION: 0.9.1
    steps:
      - checkout
      - run:
          name: install golang
          command: |
            sudo rm -fr /usr/local/go
            curl -sSLO https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
            tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz
            sudo mv go /usr/local
            rm -fr go${GOLANG_VERSION}.linux-amd64.tar.gz
            mkdir -p $GOPATH/{src/github.com/isindir,bin,pkg}
            go get -u golang.org/x/lint/golint
            go version
            go env
      - restore-cache:
          keys:
            - v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
            - v2-modules-{{ .Branch }}-
            - v2-modules-
      - run:
          name: install operator-sdk
          command: |
            curl -sSLo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu
            chmod +x operator-sdk
            sudo mv operator-sdk /usr/local/bin/
      - run:
          name: install git-chglog
          command: |
            curl -sSLo git-chglog https://github.com/git-chglog/git-chglog/releases/download/${GIT_CHGLOG_VERSION}/git-chglog_linux_amd64
            chmod +x git-chglog
            sudo mv git-chglog /usr/local/bin/
      - run:
          name: install hub
          command: |
            curl -sSLO https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz
            tar -xzf hub-linux-amd64-${HUB_VERSION}.tgz
            chmod +x hub-linux-amd64-${HUB_VERSION}/bin/hub
            sudo mv hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin/
      - run:
          name: Fetch Go dependencies
          command: |
            make mod
      - run:
          name: Build
          command: |
            make build
      - run:
          name: release
          command: |
            make release

  ##################################################
  # build
  ##################################################
  build:
    working_directory: /home/circleci/gogo/src/github.com/isindir/eks-ebs-node-operator
    machine:
      image: ubuntu-1604:202004-01
    environment:
      # https://github.com/kubernetes/kubernetes/releases
      K8S_VERSION: v1.18.3
      # https://github.com/kubernetes-sigs/kind/releases
      KIND_VERSION: v0.8.1
      # https://github.com/helm/helm/releases
      HELM_VERSION: v3.2.4
      GOLANG_VERSION: 1.14.4
      # https://github.com/operator-framework/operator-sdk/releases
      OPERATOR_SDK_VERSION: v0.17.1

      KUBECONFIG: /home/circleci/.kube/config

      GOPATH: /home/circleci/gogo
      GOROOT: /usr/local/go
      GO111MODULE: "on"
      GO15VENDOREXPERIMENT: 1
    steps:
      - checkout
      - restore-cache:
          keys:
            - v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
            - v2-modules-{{ .Branch }}-
            - v2-modules-
      - run:
          name: install golang
          command: |
            sudo rm -fr ${GOROOT}
            curl -sSLO https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
            tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz
            sudo mv go /usr/local
            rm -fr go${GOLANG_VERSION}.linux-amd64.tar.gz
            mkdir -p $GOPATH/{src/github.com/isindir,bin,pkg}
            go get -u golang.org/x/lint/golint
            go version
            go env
      - run:
          name: install kubectl
          command: |
            curl -sSLo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: install operator-sdk
          command: |
            curl -sSLo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu
            chmod +x operator-sdk
            sudo mv operator-sdk /usr/local/bin/
      - run:
          name: install kind
          command: |
            curl -sSLo kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64
            chmod +x kind
            sudo mv kind /usr/local/bin/
      - run:
          name: start kind
          command: |
            kind create cluster --quiet --name operator
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done

            kubectl label nodes operator-control-plane nodes.kubernetes.io/instance-type=m5a.2xlarge

            # Dump cluster info
            kubectl cluster-info
            kubectl version
            kubectl describe node operator-control-plane
      - run:
          name: install helm
          command: |
            # install helm
            curl -sSL https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -xzvf - linux-amd64/helm
            chmod +x linux-amd64/helm
            sudo mv linux-amd64/helm /usr/local/bin/
            rm -fr linux-amd64
            helm version
      # real fun starts here
      - run:
          name: Fetch Go dependencies
          command: |
            make mod
      - run:
          name: Build
          command: |
            make build
      - save_cache:
          key: v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/gogo/pkg"
      - run:
          name: Run Local Tests
          command: |
            nohup make run/local &
            sleep 150
            RESULT=$( kubectl get node operator-control-plane -o json | jq -r '.status.capacity["eksattachments"]' )
            if [[ $RESULT != "23" ]]; then
              echo "Pipeline failed"
              exit 1
            else
              echo "Success"
            fi

workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - release:
          filters:
            branches:
              only:
                - master
